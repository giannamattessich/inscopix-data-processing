import traceback
import os
import sys
sys.path.append(r'C:\Users\Gianna\Documents\Python Scripts\time_series_and_LR_processing')
import secrets
from PyQt5.uic import loadUi
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QFileDialog, QMessageBox, QHBoxLayout
from PyQt5.QtCore import QSize, pyqtSlot as Slot, Qt
from src.workutils.TaskManager import TaskManager
from src.frontend.ImageButton import ImageButton
from src.frontend.GIFPopup import GIFPopup
from PyQt5.QtGui import QPixmap, QFont
from src.backend.Timeseries import Timeseries


class TimeseriesUI(QMainWindow):

    def __init__(self):
        super().__init__()
        loadUi(r"src\frontend\time_series_ui.ui", self)
        self.task_manager = TaskManager(self)
        # get images from GUI folder and filter by images, excluding GIF files
        gui_img_folder_content = os.listdir(r'GUI Images')
        get_pics = list(filter(lambda x: not x.endswith('.gif'), gui_img_folder_content))
        # randomize button image and add button
        self.button_img = secrets.choice(get_pics)
        self.process_button = ImageButton(QPixmap(fr"GUI images\{self.button_img}"))
        self.process_button.setMaximumSize(QSize(300, 250))
        self.horizontalLayout.addWidget(self.process_button)


        #set GUI state
        self.running = False








        #display error
    def show_error_message(self, message):
        error_dialog = QMessageBox()
        error_dialog.setIcon(QMessageBox.Critical)
        error_dialog.setWindowTitle('Error')
        error_dialog.setText(message)
        font = QFont("Cascadia Code", 9)
        error_dialog.setFont(font)
        error_dialog.setStyleSheet('background-color: #7d0b02')
        error_dialog.exec_()

    #show pop-up dialog boxes
    def show_complete_dialog(self, message):
        msg_box = QMessageBox()
        msg_box.setIcon(QMessageBox.Information)
        msg_box.setWindowTitle('Message')
        msg_box.setText(message)
        msg_box.setStyleSheet('background-color: #d2c5db')
        font = QFont("Cascadia Code", 9)
        msg_box.setFont(font)
        msg_box.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        msg_box.exec_()

    #use to open file explorer to select input dir file
    def open_dir_dialog(self):
        options = QFileDialog.Options() 
        options |= QFileDialog.ReadOnly
        #set F drive as default, this 3rd argument can be changed to open the default directory
        self.dir_path= QFileDialog.getExistingDirectory(self, "Open Dictionary", "F:", options=options)
        if self.dir_path:
            self.inputdirtext.setText(self.dir_path)
            self.input_dir = self.inputdirtext.text()
            self.main_dir_selected = True



if __name__ == '__main__':
    app = QApplication(sys.argv)
    mainWindow = TimeseriesUI()
    mainWindow.show()
    sys.exit(app.exec_())